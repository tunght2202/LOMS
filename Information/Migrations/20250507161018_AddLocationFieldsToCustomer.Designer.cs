// <auto-generated />
using System;
using Information.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Information.Migrations
{
    [DbContext(typeof(LomsdatabaseContext))]
    [Migration("20250507161018_AddLocationFieldsToCustomer")]
    partial class AddLocationFieldsToCustomer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Information.Models.AdministrativeRegion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CodeName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code_name");

                    b.Property<string>("CodeNameEn")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code_name_en");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name_en");

                    b.HasKey("Id")
                        .HasName("administrative_regions_pkey");

                    b.ToTable("administrative_regions", (string)null);
                });

            modelBuilder.Entity("Information.Models.AdministrativeUnit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CodeName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code_name");

                    b.Property<string>("CodeNameEn")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code_name_en");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("FullNameEn")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name_en");

                    b.Property<string>("ShortName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("short_name");

                    b.Property<string>("ShortNameEn")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("short_name_en");

                    b.HasKey("Id")
                        .HasName("administrative_units_pkey");

                    b.ToTable("administrative_units", (string)null);
                });

            modelBuilder.Entity("Information.Models.Comment", b =>
                {
                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CommentID");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LiveStreamCustomerId")
                        .HasColumnType("int")
                        .HasColumnName("LiveStreamCustomerID");

                    b.HasKey("CommentId");

                    b.HasIndex(new[] { "LiveStreamCustomerId" }, "IX_Comments_LiveStreamCustomerID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Information.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FacebookName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("FailedDeliveries")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageURL");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("SuccessfulDeliveries")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WardId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Information.Models.District", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("code");

                    b.Property<int?>("AdministrativeUnitId")
                        .HasColumnType("int")
                        .HasColumnName("administrative_unit_id");

                    b.Property<string>("CodeName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code_name");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("FullNameEn")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name_en");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name_en");

                    b.Property<string>("ProvinceCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("province_code");

                    b.HasKey("Code")
                        .HasName("districts_pkey");

                    b.HasIndex(new[] { "ProvinceCode" }, "idx_districts_province");

                    b.HasIndex(new[] { "AdministrativeUnitId" }, "idx_districts_unit");

                    b.ToTable("districts", (string)null);
                });

            modelBuilder.Entity("Information.Models.ListProduct", b =>
                {
                    b.Property<int>("ListProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListProductId"));

                    b.Property<string>("ListProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("ListProductId");

                    b.HasIndex(new[] { "UserId" }, "IX_ListProducts_UserID");

                    b.ToTable("ListProducts");
                });

            modelBuilder.Entity("Information.Models.LiveStream", b =>
                {
                    b.Property<string>("LivestreamId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("LivestreamID");

                    b.Property<int?>("ListProductId")
                        .HasColumnType("int")
                        .HasColumnName("ListProductID");

                    b.Property<decimal?>("PriceMax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StatusDelete")
                        .HasColumnType("bit");

                    b.Property<string>("StreamTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreamUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StreamURL");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("LivestreamId");

                    b.HasIndex(new[] { "ListProductId" }, "IX_LiveStreams_ListProductID");

                    b.HasIndex(new[] { "UserId" }, "IX_LiveStreams_UserID");

                    b.ToTable("LiveStreams");
                });

            modelBuilder.Entity("Information.Models.LiveStreamCustomer", b =>
                {
                    b.Property<int>("LiveStreamCustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LiveStreamCustomerId"));

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("LivestreamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("LivestreamID");

                    b.HasKey("LiveStreamCustomerId");

                    b.HasIndex(new[] { "CustomerId" }, "IX_LiveStreamCustomers_CustomerID");

                    b.HasIndex(new[] { "LivestreamId" }, "IX_LiveStreamCustomers_LivestreamID");

                    b.ToTable("LiveStreamCustomers");
                });

            modelBuilder.Entity("Information.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CommentID");

                    b.Property<decimal?>("CurrentPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("StatusCheck")
                        .HasColumnType("bit");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex(new[] { "CommentId" }, "IX_Orders_CommentID")
                        .IsUnique()
                        .HasFilter("([CommentID] IS NOT NULL)");

                    b.HasIndex(new[] { "ProductId" }, "IX_Orders_ProductID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Information.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageURL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("ProductId");

                    b.HasIndex(new[] { "UserId" }, "IX_Products_UserID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Information.Models.ProductListProduct", b =>
                {
                    b.Property<int>("ProductListProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductListProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductListProductId"));

                    b.Property<int>("ListProductId")
                        .HasColumnType("int")
                        .HasColumnName("ListProductID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasKey("ProductListProductId");

                    b.HasIndex(new[] { "ListProductId" }, "IX_ProductListProducts_ListProductID");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductListProducts_ProductID");

                    b.ToTable("ProductListProducts");
                });

            modelBuilder.Entity("Information.Models.Province", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("code");

                    b.Property<int?>("AdministrativeRegionId")
                        .HasColumnType("int")
                        .HasColumnName("administrative_region_id");

                    b.Property<int?>("AdministrativeUnitId")
                        .HasColumnType("int")
                        .HasColumnName("administrative_unit_id");

                    b.Property<string>("CodeName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("FullNameEn")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name_en");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name_en");

                    b.HasKey("Code")
                        .HasName("provinces_pkey");

                    b.HasIndex(new[] { "AdministrativeRegionId" }, "idx_provinces_region");

                    b.HasIndex(new[] { "AdministrativeUnitId" }, "idx_provinces_unit");

                    b.ToTable("provinces", (string)null);
                });

            modelBuilder.Entity("Information.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Information.Models.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_RoleClaims_RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Information.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageURL");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenFacbook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Information.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_UserClaims_UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Information.Models.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_UserLogins_UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Information.Models.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Information.Models.Ward", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("code");

                    b.Property<int?>("AdministrativeUnitId")
                        .HasColumnType("int")
                        .HasColumnName("administrative_unit_id");

                    b.Property<string>("CodeName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code_name");

                    b.Property<string>("DistrictCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("district_code");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("FullNameEn")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name_en");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name_en");

                    b.HasKey("Code")
                        .HasName("wards_pkey");

                    b.HasIndex(new[] { "DistrictCode" }, "idx_wards_district");

                    b.HasIndex(new[] { "AdministrativeUnitId" }, "idx_wards_unit");

                    b.ToTable("wards", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_UserRoles_RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Information.Models.Comment", b =>
                {
                    b.HasOne("Information.Models.LiveStreamCustomer", "LiveStreamCustomer")
                        .WithMany("Comments")
                        .HasForeignKey("LiveStreamCustomerId")
                        .IsRequired();

                    b.Navigation("LiveStreamCustomer");
                });

            modelBuilder.Entity("Information.Models.District", b =>
                {
                    b.HasOne("Information.Models.AdministrativeUnit", "AdministrativeUnit")
                        .WithMany("Districts")
                        .HasForeignKey("AdministrativeUnitId")
                        .HasConstraintName("districts_administrative_unit_id_fkey");

                    b.HasOne("Information.Models.Province", "ProvinceCodeNavigation")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceCode")
                        .HasConstraintName("districts_province_code_fkey");

                    b.Navigation("AdministrativeUnit");

                    b.Navigation("ProvinceCodeNavigation");
                });

            modelBuilder.Entity("Information.Models.ListProduct", b =>
                {
                    b.HasOne("Information.Models.User", "User")
                        .WithMany("ListProducts")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Information.Models.LiveStream", b =>
                {
                    b.HasOne("Information.Models.ListProduct", "ListProduct")
                        .WithMany("LiveStreams")
                        .HasForeignKey("ListProductId");

                    b.HasOne("Information.Models.User", "User")
                        .WithMany("LiveStreams")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("ListProduct");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Information.Models.LiveStreamCustomer", b =>
                {
                    b.HasOne("Information.Models.Customer", "Customer")
                        .WithMany("LiveStreamCustomers")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("Information.Models.LiveStream", "Livestream")
                        .WithMany("LiveStreamCustomers")
                        .HasForeignKey("LivestreamId")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Livestream");
                });

            modelBuilder.Entity("Information.Models.Order", b =>
                {
                    b.HasOne("Information.Models.Comment", "Comment")
                        .WithOne("Order")
                        .HasForeignKey("Information.Models.Order", "CommentId");

                    b.HasOne("Information.Models.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Information.Models.Product", b =>
                {
                    b.HasOne("Information.Models.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Information.Models.ProductListProduct", b =>
                {
                    b.HasOne("Information.Models.ListProduct", "ListProduct")
                        .WithMany("ProductListProducts")
                        .HasForeignKey("ListProductId")
                        .IsRequired();

                    b.HasOne("Information.Models.Product", "Product")
                        .WithMany("ProductListProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.Navigation("ListProduct");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Information.Models.Province", b =>
                {
                    b.HasOne("Information.Models.AdministrativeRegion", "AdministrativeRegion")
                        .WithMany("Provinces")
                        .HasForeignKey("AdministrativeRegionId")
                        .HasConstraintName("provinces_administrative_region_id_fkey");

                    b.HasOne("Information.Models.AdministrativeUnit", "AdministrativeUnit")
                        .WithMany("Provinces")
                        .HasForeignKey("AdministrativeUnitId")
                        .HasConstraintName("provinces_administrative_unit_id_fkey");

                    b.Navigation("AdministrativeRegion");

                    b.Navigation("AdministrativeUnit");
                });

            modelBuilder.Entity("Information.Models.RoleClaim", b =>
                {
                    b.HasOne("Information.Models.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Information.Models.UserClaim", b =>
                {
                    b.HasOne("Information.Models.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Information.Models.UserLogin", b =>
                {
                    b.HasOne("Information.Models.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Information.Models.UserToken", b =>
                {
                    b.HasOne("Information.Models.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Information.Models.Ward", b =>
                {
                    b.HasOne("Information.Models.AdministrativeUnit", "AdministrativeUnit")
                        .WithMany("Wards")
                        .HasForeignKey("AdministrativeUnitId")
                        .HasConstraintName("wards_administrative_unit_id_fkey");

                    b.HasOne("Information.Models.District", "DistrictCodeNavigation")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictCode")
                        .HasConstraintName("wards_district_code_fkey");

                    b.Navigation("AdministrativeUnit");

                    b.Navigation("DistrictCodeNavigation");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("Information.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Information.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Information.Models.AdministrativeRegion", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("Information.Models.AdministrativeUnit", b =>
                {
                    b.Navigation("Districts");

                    b.Navigation("Provinces");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("Information.Models.Comment", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Information.Models.Customer", b =>
                {
                    b.Navigation("LiveStreamCustomers");
                });

            modelBuilder.Entity("Information.Models.District", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("Information.Models.ListProduct", b =>
                {
                    b.Navigation("LiveStreams");

                    b.Navigation("ProductListProducts");
                });

            modelBuilder.Entity("Information.Models.LiveStream", b =>
                {
                    b.Navigation("LiveStreamCustomers");
                });

            modelBuilder.Entity("Information.Models.LiveStreamCustomer", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Information.Models.Product", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductListProducts");
                });

            modelBuilder.Entity("Information.Models.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Information.Models.Role", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("Information.Models.User", b =>
                {
                    b.Navigation("ListProducts");

                    b.Navigation("LiveStreams");

                    b.Navigation("Products");

                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
